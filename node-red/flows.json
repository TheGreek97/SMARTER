[{"id":"faabdb9262a45d54","type":"tab","label":"SMARTER","disabled":false,"info":""},{"id":"e52910f005bbec79","type":"mqtt out","z":"faabdb9262a45d54","name":"Output \"output\"","topic":"smarter/output","qos":"","retain":"","broker":"5a67015081be59c7","x":911.0000076293945,"y":146.00003242492676,"wires":[]},{"id":"9b3c0c53132aef6e","type":"mqtt out","z":"faabdb9262a45d54","name":"Output \"letturaRFID\"","topic":"smarter/letturaRFID","qos":"","retain":"","broker":"5a67015081be59c7","x":926.0000038146973,"y":62.000027656555176,"wires":[]},{"id":"8ec4c91932313bf1","type":"inject","z":"faabdb9262a45d54","name":"Reset","topic":"","payload":"reset","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":741.9999923706055,"y":30.000057220458984,"wires":[["2f67d83a.cbe6c8"]]},{"id":"945cee7afe1bcf4c","type":"comment","z":"faabdb9262a45d54","name":"Reset ?","info":"Questo inject Ã¨ utilizzato in fase di debug per poter resettare tutti i NodeMCU ESP8266.","x":882.9999771118164,"y":20,"wires":[]},{"id":"bbf19e9c04f74172","type":"function","z":"faabdb9262a45d54","name":"Set msg values","func":"try {\n    msg.payload = flow.get(\"rules\")\n    msg.payload[\"board_result\"] = {\"isCorrect\" : msg.board_result.isCorrect, \"result\" : msg.board_result.result}\n    if (msg[\"event\"].startsWith('i')) { // \"Inserito\"\n        msg.payload[\"event\"] = 'placed'\n    } else {\n        msg.payload[\"event\"] = 'removed'\n    }\n    return msg;\n} catch (e) {\n    node.warn (e.stack);\n    //return msg;\n}","outputs":1,"noerr":0,"x":358,"y":369.99999237060547,"wires":[["dd539eddd46f6df8","c5756f8a.56d51"]]},{"id":"d4d1bdca88103941","type":"mqtt in","z":"faabdb9262a45d54","name":"","topic":"smarter/letturaRFID","qos":"0","datatype":"auto","broker":"5a67015081be59c7","x":114,"y":403.0000157356262,"wires":[["0f9c116ed5b6b865","4305e719.b6a4d8"]]},{"id":"e9cc0eb0cdf6bd83","type":"function","z":"faabdb9262a45d54","name":"TagLettersToDigitOld","func":"// Array useful for letter-to-digit number conversion\nnumArray = new Array (\"\", \"uno\", \"due\", \"tre\", \"quattro\", \"cinque\", \"sei\", \"sette\", \"otto\", \"nove\");\n// Regular expression useful for extracting only the part containing the lettered number\nlet reg = new RegExp('^([a-z])+');\nlet tags = [];\n\ntry {\n    // Buffer to String\n    msg.payload = msg.payload.toString('ascii');\n    if (msg.payload === \"Collegamento con MQTT\" || msg.payload === \"reset\") {\n        return;\n    }\n    \n    let parsePayload = JSON.parse(msg.payload);\n    \n    parsePayload.Reader0.tag = parsePayload.Reader0.tag.slice(0, -2);\n    parsePayload.Reader1.tag = parsePayload.Reader1.tag;\n    parsePayload.Reader2.tag = parsePayload.Reader2.tag.slice(0, -2);\n    parsePayload.Reader3.tag = parsePayload.Reader3.tag.slice(0, -2);\n    parsePayload.Reader4.tag = parsePayload.Reader4.tag.slice(0, -2);\n\n    // If one of the 5 tags is empty, skip this function\n    if (parsePayload.Reader0.tag === \"\") return;\n    if (parsePayload.Reader1.tag === \"\") return;\n    if (parsePayload.Reader2.tag === \"\") return;\n    if (parsePayload.Reader3.tag === \"\") return;\n    if (parsePayload.Reader4.tag === \"\") return;\n    \n    // Save the various components of the expression in the array\n    tags[0] = numArray.indexOf(parsePayload.Reader0.tag.match(reg)[0]); // first number\n    tags[1] = parsePayload.Reader1.tag.match(reg)[0];                   // sign operation type\n    tags[2] = numArray.indexOf(parsePayload.Reader2.tag.match(reg)[0]); // second number\n    tags[3] = parsePayload.Reader3.tag.match(reg)[0];                   // sign comparison/comparison\n    tags[4] = numArray.indexOf(parsePayload.Reader4.tag.match(reg)[0]); // result\n    \n    msg.payload = {\n        'tags': tags\n    };\n} catch (error) {\n    msg.payload = {\n        'Err': error.stack\n    }\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":1324.0001935958862,"y":28.000100135803223,"wires":[[]]},{"id":"9e09e2ccabd9da35","type":"function","z":"faabdb9262a45d54","name":"ComputeMath","func":"let math_results = {\n    \"result\": null,\n    \"isCorrect\": null\n}\ntry {\n    let num1 = msg.payload.tags[0];\n    let oper1 = msg.payload.tags[1];\n    let num2 = msg.payload.tags[2];\n    let oper2 = msg.payload.tags[3];\n    let num3 = msg.payload.tags[4];\n    let result;\n    let isCorrect;\n    \n    if ((num1 === \"\" || isNaN(num1)) || (num2 === \"\" || isNaN(num2)) || num3 === \"\" || isNaN(num3))\n        throw \"Not a valid math expression!\";\n    // If to convert from letters the type of operation\n    if (oper1 == \"+\") {\n        result = num1 + num2;\n    } else if (oper1 == \"-\") {\n        result = num1 - num2;\n    } else if (oper1 == \"x\") {\n        result = num1 * num2;\n    } else if (oper1 == \"/\") {\n        result = num1 / num2;\n    } else {\n        throw \"Not a valid math expression!\";\n    }\n    \n    // If to convert from letters to comparison/comparison sign\n    if (oper2 == \"=\") {\n        isCorrect = result === num3;\n    } else if (oper2 == \">\") {\n        isCorrect = result > num3;\n    } else if (oper2 == \"<\") {\n        isCorrect = result < num3;\n    } else {\n        throw \"Not a valid math expression!\";\n    }\n    math_results[\"result\"] = result\n    math_results[\"isCorrect\"] = isCorrect\n} catch (error) {\n    //msg.payload = \"\\n\"+ error\n    //node.warn (\"ResultGame function error\\n\" + error)\n} finally {\n    // Query to retrieve rules\n\n    // I set the tags as a global variable\n    global.set(\"tags\",msg.payload[\"tags\"]);\n    \n    msg = {\n        \"board_result\" : math_results,\n        \"event\" : msg.event\n    };\n    return msg;\n}","outputs":1,"noerr":0,"x":541,"y":307.00000953674316,"wires":[["bbf19e9c04f74172"]]},{"id":"8fec2b3f88c81e57","type":"function","z":"faabdb9262a45d54","name":"SendOutput","func":"try {\n    let validRules = msg.payload.validRules;\n    if (validRules.validRules.length > 0) {\n        let url = \"\";\n        let color = \"\";\n        \n        // Word to RGB color\n        var colors = {\n            \"rosso\" : \"255,0,0\",\n            \"verde\" : \"0,255,0\",\n            \"blu\"   : \"0,0,255\",\n            \"nulla\" : \"256,0,0\",\n            \"spegni\": \"0,0,0\"\n        };\n        \n        var audios = {\n            \"success\" : \"vittoria\",\n            \"fail\" : \"sconfitta\"\n        }\n        let color_changed = false\n        for(var i=0; i<validRules[\"actions\"].length; i++) {\n            if(validRules[\"actions\"][i].startsWith(\"A\")) \n            { // \"A-nomeFileaudio\"\n                url = validRules[\"actions\"][i].substr(2);\n                url = audios[url]\n            } \n            else \n            { // \"C-colore\"\n                color = validRules[\"actions\"][i].substr(2);\n                //node.warn (\"Color is: \" + color)\n                if (color == 'blue') {\n                    color = 'blu'\n                    color_changed = color\n                } else if (color == 'green') {\n                    color = 'verde'\n                    color_changed = color\n                    \n                } else if (color == 'red') {\n                    color = 'rosso'\n                    color_changed = color\n                    \n                } else if (color == 'off'){\n                    color = 'spegni'\n                    color_changed = color\n                }\n            }\n        }\n        /*\n        if (typeof colors[color.toLowerCase()] != 'undefined') {\n            color = colors[color.toLowerCase()];\n        }*/\n        \n        if (color_changed) { //If the last rule was \"nulla\", the color would never change otherwise \n            color = colors[color_changed] \n        } else {\n            color = colors[\"nulla\"] \n        }\n        \n        msg.payload = {\n            \"URL\": url,\n            \"LED\": color\n        }\n        \n        return msg;\n    }\n    \n} catch (error) {\n    return;\n}","outputs":1,"noerr":0,"x":745.0000228881836,"y":416.9999771118164,"wires":[["236393138ab13618","0a1afc761c68726b"]]},{"id":"dd539eddd46f6df8","type":"function","z":"faabdb9262a45d54","name":"ValidateRules","func":"let validRules = [];\nlet isValid;\nvar count = Object.keys(msg.payload[\"Rules\"]).length;\nlet actions = [];\n\nfor(var i=0; i<count; i++) {\n    // Only enabled rules are considered\n    if(msg.payload[\"Rules\"][\"Rule\"+i][\"enabled\"] == 1) {\n        isValid = true;\n        \n        //Event\n        let eventJSON = msg.payload[\"Rules\"][\"Rule\"+i][\"event_data\"];\n        //Check if the actual event matches with the event defined in the rule \n        \n        //node.warn (\"Msg.event: \"+msg.payload.event)\n        // node.warn (\"Rule event: \"+eventJSON[\"evt\"])\n        if (msg.payload.event !== eventJSON[\"evt\"]) {\n            let expr_correct = msg.payload[\"board_result\"].isCorrect\n            if (expr_correct !== null) \n            {\n                if (eventJSON[\"evt\"] === 'expr_correct') {\n                    if (!expr_correct)\n                        isValid = false;\n                } \n                else if (eventJSON[\"evt\"] === 'expr_wrong') {\n                    if (expr_correct)\n                        isValid = false;\n                }\n                else { // Error \n                    isValid = false;\n                }\n            }\n            else { // Error \n                isValid = false;\n            }\n        }\n        //if (isValid) node.warn (\"Event \"+ i + \" is valid! \" )\n            \n        \n        if (! isValid) continue;\n        \n        //States\n        let stateJSON = msg.payload[\"Rules\"][\"Rule\"+i][\"state_data\"];\n        \n        for(var j=0; j<stateJSON.length; j++) {\n            let card_state = msg.payload[\"Rules\"][\"Rule\"+i][\"state_data\"][j][\"card\"];\n            let pos_state = msg.payload[\"Rules\"][\"Rule\"+i][\"state_data\"][j][\"position\"]-1;\n            \n            //State = \"Tile in position pos_state is equal to card_state\"\n            if(msg.payload[\"tags\"][pos_state] != card_state) {\n                isValid = false; //Solo se Ã¨ uguale\n                //node.warn (\"state mismatch:\")\n                //node.warn (\"In position \"+pos_state+\": \")\n                //node.warn (\"Expected: \"+msg.payload[\"tags\"][pos_state] + \", received: \" +card_state)\n                continue;\n            }\n        }\n        \n        // If the rule is valid, then actions are saved\n        if(isValid) {\n            //node.warn (\"Rule \"+ i + \" is valid! \" )\n            //Action\n            let actionJSON = msg.payload[\"Rules\"][\"Rule\"+i][\"action_data\"];\n        \n            for(j=0; j<actionJSON.length; j++) {\n                if(actionJSON[j].hasOwnProperty(\"audio\")) {\n                    actions.push(\"A-\" + actionJSON[j][\"audio\"]);\n                } else {\n                    actions.push(\"C-\" + actionJSON[j][\"colour\"]);\n                }\n            }\n            \n            validRules.push(i);\n        }\n    }\n}\n\nmsg.payload[\"validRules\"] = {\n    \"validRules\" : validRules,\n    \"actions\" : actions\n};\nreturn msg;","outputs":1,"noerr":0,"x":584.9999732971191,"y":375.99998474121094,"wires":[["8fec2b3f88c81e57","342fe0fb.5c825"]]},{"id":"236393138ab13618","type":"mqtt out","z":"faabdb9262a45d54","name":"Output \"output\"","topic":"smarter/output","qos":"","retain":"","broker":"5a67015081be59c7","x":928.9998741149902,"y":504.99996757507324,"wires":[]},{"id":"0a1afc761c68726b","type":"debug","z":"faabdb9262a45d54","name":"Debug","active":false,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","x":529.9999771118164,"y":531.9999904632568,"wires":[]},{"id":"51dbb66e0e9c2f47","type":"comment","z":"faabdb9262a45d54","name":"FINAL FLOW","info":"FINAL FLOW","x":80.00000762939453,"y":282.99999237060547,"wires":[]},{"id":"0f9c116ed5b6b865","type":"function","z":"faabdb9262a45d54","name":"MQTT to String","func":"msg.payload = msg.payload.toString('ascii');\nreturn msg;","outputs":1,"noerr":0,"x":329.00001525878906,"y":529.9999904632568,"wires":[["0a1afc761c68726b"]]},{"id":"a9c3b530772f0a93","type":"mqtt out","z":"faabdb9262a45d54","name":"Write RFID tag","topic":"smarter/letturaRFID","qos":"0","retain":"","broker":"5a67015081be59c7","x":457.9999694824219,"y":876.9999713897705,"wires":[]},{"id":"699ddc4292eca3e2","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"uno______________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":137.99996948242188,"y":730.9999809265137,"wires":[["a9c3b530772f0a93"]]},{"id":"18152b7210b71438","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"due_______________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":137.99996948242188,"y":770.9999809265137,"wires":[["a9c3b530772f0a93"]]},{"id":"1dbed328fe8bec3d","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"tre______________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":127.99996948242188,"y":810.9999809265137,"wires":[["a9c3b530772f0a93"]]},{"id":"bbf16cedf31502b0","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"quattro__________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":127.99996948242188,"y":850.9999809265137,"wires":[["a9c3b530772f0a93"]]},{"id":"4852905611467308","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"cinque___________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":127.99996948242188,"y":890.9999809265137,"wires":[["a9c3b530772f0a93"]]},{"id":"73b2bddf7f1a0de7","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"sei_______________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":137.99996948242188,"y":930.9999809265137,"wires":[["a9c3b530772f0a93"]]},{"id":"666775c98e3935e5","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"sette____________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":127.99996948242188,"y":970.9999809265137,"wires":[["a9c3b530772f0a93"]]},{"id":"d6df96fabed4d6a5","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"otto_____________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":127.99996948242188,"y":1010.9999809265137,"wires":[["a9c3b530772f0a93"]]},{"id":"dd740808a8a98cfd","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"nove______________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":137.99996948242188,"y":1050.9999809265137,"wires":[["a9c3b530772f0a93"]]},{"id":"f35f900b417a68ba","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"addizione________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":447.9999694824219,"y":616.9999713897705,"wires":[["a9c3b530772f0a93"]]},{"id":"e31a40f71c605192","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"sottrazione_____","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":437.9999694824219,"y":656.9999713897705,"wires":[["a9c3b530772f0a93"]]},{"id":"98f91bd90324bb84","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"maggiore__________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":457.9999694824219,"y":1076.9999713897705,"wires":[["a9c3b530772f0a93"]]},{"id":"bcbe609d0e62e75c","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"minore____________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":457.9999694824219,"y":1116.9999713897705,"wires":[["a9c3b530772f0a93"]]},{"id":"5774b9c90426f24a","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"uguale___________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":447.9999694824219,"y":1036.9999713897705,"wires":[["a9c3b530772f0a93"]]},{"id":"361ab6405a5e87ed","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"moltiplicazione_","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":437.9999694824219,"y":696.9999713897705,"wires":[["a9c3b530772f0a93"]]},{"id":"e29f7ee0ba58472b","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"divisione________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":447.9999694824219,"y":736.9999713897705,"wires":[["a9c3b530772f0a93"]]},{"id":"12da78d2b870a107","type":"inject","z":"faabdb9262a45d54","name":"Sconfitta","topic":"","payload":"{\"URL\":\"sconfitta\",\"LED\":\"255,0,0\"}","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":"5","x":869.0000076293945,"y":572.0000152587891,"wires":[["236393138ab13618"]]},{"id":"e297238.f07b0e","type":"function","z":"faabdb9262a45d54","name":"TagLettersToDigit","func":"// Array useful for letter-to-digit number conversion\nnumArray = new Array (\"\", \"uno\", \"due\", \"tre\", \"quattro\", \"cinque\", \"sei\", \"sette\", \"otto\", \"nove\");\n// Regular expression useful for extracting only the part containing the lettered number\nlet reg = new RegExp('^([a-z])+');\nlet tags = [];\n\ntry {\n    if (msg.payload === \"Collegamento con MQTT\" || msg.payload === \"reset\") {\n        return;\n    }\n    \n    let parsePayload = JSON.parse(msg.payload);\n    \n    parsePayload.Reader0.tag = parsePayload.Reader0.tag.slice(0, -2);\n    parsePayload.Reader1.tag = parsePayload.Reader1.tag;\n    parsePayload.Reader2.tag = parsePayload.Reader2.tag.slice(0, -2);\n    parsePayload.Reader3.tag = parsePayload.Reader3.tag.slice(0, -2);\n    parsePayload.Reader4.tag = parsePayload.Reader4.tag.slice(0, -2);\n\n    // Save the various components of the expression in the array\n    if (parsePayload.Reader0.tag === \"\") {\n        tags[0] = \"\"\n    } else {\n        tags[0] = numArray.indexOf(parsePayload.Reader0.tag.match(reg)[0]); // first number\n    }\n    if (parsePayload.Reader1.tag === \"\") {\n        tags[1] = \"\"\n    } else {\n        tags[1] = parsePayload.Reader1.tag.match(reg)[0];                   // sign operation type\n    }\n    if (parsePayload.Reader2.tag === \"\") {\n        tags[2] = \"\"\n    } else {\n       tags[2] = numArray.indexOf(parsePayload.Reader2.tag.match(reg)[0]); // second number\n    }\n    if (parsePayload.Reader3.tag === \"\") {\n        tags[3] = \"\"\n    } else {\n        tags[3] = parsePayload.Reader3.tag.match(reg)[0];                   // sign comparison/comparison\n    }\n    if (parsePayload.Reader4.tag === \"\") {\n        tags[4] = \"\"\n    } else {\n        tags[4] = numArray.indexOf(parsePayload.Reader4.tag.match(reg)[0]); // result\n    }\n   \n    msg.payload = {\n        'tags': tags\n    };\n} catch (error) {\n    msg.payload = {\n        'Err': error.stack\n    }\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":1311.0001220703125,"y":177.00000953674316,"wires":[["ccdad73b.cb61e8","35326a0.bc45796"]]},{"id":"ccdad73b.cb61e8","type":"function","z":"faabdb9262a45d54","name":"ResultGame","func":"try {\n    let num1 = msg.payload.tags[0];\n    let oper1 = msg.payload.tags[1];\n    let num2 = msg.payload.tags[2];\n    let oper2 = msg.payload.tags[3];\n    let num3 = msg.payload.tags[4];\n    let result = 0;\n    let isCorrect = false;\n    \n    // If to convert from letters the type of operation\n    if (oper1 == \"addizione\") {\n        result = num1 + num2;\n    } else if (oper1 == \"sottrazione\") {\n        result = num1 - num2;\n    } else if (oper1 == \"moltiplicazione\") {\n        result = num1 * num2;\n    } else if (oper1 == \"moltiplicazione\") {\n        result = num1 / num2;\n    } else {\n        return;\n    }\n    \n    // If to convert from letters to comparison/comparison sign\n    if (oper2 == \"uguale\") {\n        isCorrect = result === num3;\n    } else if (oper2 == \"maggiore\") {\n        isCorrect = result > num3;\n    } else if (oper2 == \"minore\") {\n        isCorrect = result < num3;\n    } else {\n        return;\n    }\n    \n    // Query to retrieve rules\n    qry = \"SELECT * FROM rules;\"\n    \n    // I set the tags as a global variable\n    global.set(\"tags\",msg.payload[\"tags\"]);\n    \n    msg = {\n        \"payload\" : {\n            \"result\": result,\n            \"isCorrect\": isCorrect\n        },\n        // The MySQL node requires the query to be located in msg.topic\n        \"topic\": qry\n    };\n    \n    return msg;\n} catch (error) {\n    msg.payload = \"ResultGame function error\\n\"+ error\n    return msg;\n}","outputs":1,"noerr":0,"x":1522.0001220703125,"y":149.00000953674316,"wires":[[]]},{"id":"c671efca.af831","type":"inject","z":"faabdb9262a45d54","name":"Debug","topic":"","payload":"{\"Reader0\":{\"pin\": \"2\", \"tag\": \"minore__________\u0017u\"},\"Reader1\":{\"pin\": \"4\", \"tag\": \"maggiore________\\0\"},\"Reader2\":{\"pin\": \"5\", \"tag\": \"\"},\"Reader3\":{\"pin\": \"15\", \"tag\": \"minore__________\u0017u\"},\"Reader4\":{\"pin\": \"16\", \"tag\": \"\"}}","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":1190.0002012252808,"y":88.00001239776611,"wires":[["78de72ff.0d307c"]]},{"id":"35326a0.bc45796","type":"debug","z":"faabdb9262a45d54","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":1498.0001220703125,"y":63.000009536743164,"wires":[]},{"id":"4305e719.b6a4d8","type":"function","z":"faabdb9262a45d54","name":"TagLettersToDigit","func":"// Array useful for letter-to-digit number conversion\nlet numArray = new Array (\"zero\", \"uno\", \"due\", \"tre\", \"quattro\", \"cinque\", \"sei\", \"sette\", \"otto\", \"nove\");\n// Regular expression useful for extracting only the part containing the lettered number\nlet reg = new RegExp('^([a-z])+');\nlet tags = [];\nlet symbols = {\n    \"uguale\" : \"=\",\n    \"minore\" : \"<\",\n    \"maggiore\" : \">\",\n    \"addizione\" : \"+\",\n    \"sottrazione\" : \"-\",\n    \"moltiplicazione\" : \"x\",\n    \"moltiplicazion\" : \"x\",\n    \"divisione\" : \"/\"\n}\n\nlet parseVal = function (str) {\n    if (str === \"\") {\n        return \"\"\n    }\n    let temp = str.match(reg)[0]\n    let val = numArray.indexOf(temp); \n    if (val === -1) { // if not a number\n        val = symbols [temp]\n        if (! val) {\n            return str\n        }\n    }\n    return val\n}\n\nlet parseValSpec = function (str) {\n    if (str === \"\") {\n        return \"\"\n    }\n    let temp = str.match(reg)[0]\n    let val = numArray.indexOf(temp); \n    if (val === -1) { // if not a number\n        val = symbols [temp]\n        if (! val) {\n            return str\n        }\n    } else if (val === 9) {\n        return \"=\"\n    }\n    return val\n}\n\ntry {\n    // Buffer to String\n    msg.payload = msg.payload.toString('ascii');\n    msg.payload = msg.payload.replace(/[^A-Za-z 0-9 \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~]*/g, '')\n    if (msg.payload === \"Collegamento con MQTT\" || msg.payload === \"reset\") {\n        return;\n    }\n    \n    let parsePayload = JSON.parse(msg.payload);\n    \n    parsePayload.Reader0.tag = parsePayload.Reader0.tag.slice(0, -2);\n    parsePayload.Reader1.tag = parsePayload.Reader1.tag;\n    parsePayload.Reader2.tag = parsePayload.Reader2.tag.slice(0, -2);\n    parsePayload.Reader3.tag = parsePayload.Reader3.tag.slice(0, -2);\n    parsePayload.Reader4.tag = parsePayload.Reader4.tag.slice(0, -2);\n\n    // Save the various components of the expression in the array\n    tags[0] = parseVal (parsePayload.Reader0.tag)\n    tags[1] = parseVal (parsePayload.Reader1.tag)\n    tags[2] = parseVal (parsePayload.Reader2.tag)\n    tags[3] = parseValSpec (parsePayload.Reader3.tag)\n    tags[4] = parseVal (parsePayload.Reader4.tag)\n    /*if (parsePayload.Reader0.tag === \"\") {\n        tags[0] = \"\"\n    } else {\n        //tags[0] = numArray.indexOf(parsePayload.Reader0.tag.match(reg)[0]); // first number\n        //tags[0] = tags[0] === -1 ? \"\" : tags[0]\n    }\n    \n    if (parsePayload.Reader1.tag === \"\") {\n        tags[1] = \"\"\n    } else {\n        tags[1] = parsePayload.Reader1.tag.match(reg)[0];                   // sign operation type\n        tags[1] = symbols [tags[1]]\n    }\n    \n    if (parsePayload.Reader2.tag === \"\") {\n        tags[2] = \"\"\n    } else {\n       tags[2] = numArray.indexOf(parsePayload.Reader2.tag.match(reg)[0]); // second number\n       tags[2] = tags[2] === -1 ? \"\" : tags[2]\n    }\n    \n    if (parsePayload.Reader3.tag === \"\") {\n        tags[3] = \"\"\n    } else {\n        tags[3] = parsePayload.Reader3.tag.match(reg)[0];                   // sign comparison/comparison\n        tags[3] = symbols [tags[3]]\n    }\n    \n    if (parsePayload.Reader4.tag === \"\") {\n        tags[4] = \"\"\n    } else {\n        tags[4] = numArray.indexOf(parsePayload.Reader4.tag.match(reg)[0]); // result\n        tags[4] = tags[4] === -1 ? \"\" : tags[4]\n    }*/\n   \n    msg.payload = {\n        'tags': tags\n    };\n} catch (error) {\n    msg.payload = {\n        'Err': error.stack\n    }\n}\n\nif (!flow.get(\"previous_tags\")) flow.set(\"previous_tags\", tags)\n\nlet p_tags = flow.get(\"previous_tags\")\n\nlet event = false\nfor (let i=0; i<tags.length; i++) {\n    if (tags[i] != p_tags[i]) {\n        if (tags[i]){\n            event = \"i_\"+tags[i]+\"_\"+(i+1) //inserted in pos i\n        } else {\n            event = \"r_\"+(i+1) //removed in pos i\n        }\n    }\n}\nif (!event) {\n    return;\n} else {\n    flow.set(\"previous_tags\", tags)\n    msg.event = event\n    return msg;\n}\n\n","outputs":1,"noerr":0,"x":333.0000228881836,"y":302.00002098083496,"wires":[["9e09e2ccabd9da35","88f545d8.64fb98"]]},{"id":"78de72ff.0d307c","type":"function","z":"faabdb9262a45d54","name":"TagLettersToDigit","func":"msg.payload = msg.payload.toString(\"hex\").replace(/[^\\x00-\\x7F]/g,\"\");\nmsg.payload = msg.payload.replace(/[^A-Za-z 0-9 \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~]*/g, '');\nreturn msg;","outputs":1,"noerr":0,"x":1241.666750907898,"y":133.00000858306885,"wires":[["e297238.f07b0e","35326a0.bc45796"]]},{"id":"88f545d8.64fb98","type":"debug","z":"faabdb9262a45d54","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload.tags","targetType":"msg","x":518.000129699707,"y":262.000186920166,"wires":[]},{"id":"e068384d.2653e8","type":"inject","z":"faabdb9262a45d54","name":"Vittoria","topic":"","payload":"{\"URL\":\"vittoria\",\"LED\":\"\"}","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":"5","x":868.9999694824219,"y":611.9999713897705,"wires":[["236393138ab13618"]]},{"id":"342fe0fb.5c825","type":"debug","z":"faabdb9262a45d54","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload.validRules","targetType":"msg","x":819.9999313354492,"y":354.9999580383301,"wires":[]},{"id":"eb993a2b.a69718","type":"inject","z":"faabdb9262a45d54","name":"Example: 1+3=5","topic":"","payload":"{\"Reader0\":{\"pin\":\"2\",\"tag\":\"nove_________u\"},\"Reader1\":{\"pin\":\"4\",\"tag\":\"addizione______\"},\"Reader2\":{\"pin\":\"16\",\"tag\":\"tre____\"},\"Reader3\":{\"pin\":\"16\",\"tag\":\"nove______\"},\"Reader4\":{\"pin\":\"16\",\"tag\":\"cinque___\"}}","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":118.00004577636719,"y":315.0000858306885,"wires":[["4305e719.b6a4d8"]]},{"id":"d6328dd.674b07","type":"inject","z":"faabdb9262a45d54","name":"Example: 1+3=4","topic":"","payload":"{\"Reader0\":{\"pin\":\"2\",\"tag\":\"uno__________u\"},\"Reader1\":{\"pin\":\"4\",\"tag\":\"addizione______\"},\"Reader2\":{\"pin\":\"16\",\"tag\":\"tre____\"},\"Reader3\":{\"pin\":\"16\",\"tag\":\"nove__\"},\"Reader4\":{\"pin\":\"16\",\"tag\":\"quattro___\"}}","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":117.53335189819336,"y":344.99998474121094,"wires":[["4305e719.b6a4d8"]]},{"id":"2f67d83a.cbe6c8","type":"function","z":"faabdb9262a45d54","name":"","func":"flow.set(\"previous_tags\", null)\nreturn msg;","outputs":1,"noerr":0,"x":761.1001281738281,"y":106.00009441375732,"wires":[["9b3c0c53132aef6e","e52910f005bbec79"]]},{"id":"916ea63e.ee9068","type":"comment","z":"faabdb9262a45d54","name":"Writing functions","info":"","x":169.0332908630371,"y":628.9999980926514,"wires":[]},{"id":"c5756f8a.56d51","type":"debug","z":"faabdb9262a45d54","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":468.8334274291992,"y":424.9999885559082,"wires":[]},{"id":"e6e83e3a.a5602","type":"mqtt in","z":"faabdb9262a45d54","name":"","topic":"smarter/letturaRFID","qos":"2","datatype":"auto","broker":"5a67015081be59c7","x":747.9392395019531,"y":787.4468784332275,"wires":[["e6bea5aa.fdf828"]]},{"id":"e6bea5aa.fdf828","type":"debug","z":"faabdb9262a45d54","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":859.9393157958984,"y":851.3238010406494,"wires":[]},{"id":"f2c7b0be.e59d9","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"zero_____________","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":127.00944519042969,"y":690.6420097351074,"wires":[["a9c3b530772f0a93"]]},{"id":"b9be9674.0d2848","type":"inject","z":"faabdb9262a45d54","name":"","topic":"","payload":"","payloadType":"date","repeat":"10","crontab":"","once":false,"onceDelay":0.1,"x":104.9317855834961,"y":59.98105239868164,"wires":[["82c81a8f.58bf58"]]},{"id":"82c81a8f.58bf58","type":"function","z":"faabdb9262a45d54","name":"Query","func":"user_id = 5\nqry = `SELECT id, action_data, event_data, state_data, enabled FROM rules where user_id=${user_id};`\nmsg.topic = qry\nreturn msg;","outputs":1,"noerr":0,"x":285.93182373046875,"y":63.984843254089355,"wires":[["5b26377.77e9dc8"]]},{"id":"3e6d4348.e4e97c","type":"comment","z":"faabdb9262a45d54","name":"Access DB","info":"","x":75.93559265136719,"y":28.90719509124756,"wires":[]},{"id":"5b26377.77e9dc8","type":"mysql","z":"faabdb9262a45d54","mydb":"10d723b0a02fe551","name":"","x":216.00949096679688,"y":110.00566864013672,"wires":[["c481a31d.566f"]]},{"id":"c481a31d.566f","type":"function","z":"faabdb9262a45d54","name":"Convert Rules","func":"try {\n    // A new JSON is created to overwrite the original payload\n    newPayload = {};\n    newPayload[\"Rules\"] = {};\n    \n    // The structure you want to create is Rules.Rules0\n    for(var i=0; i<msg.payload.length; i++) {\n        newPayload[\"Rules\"][\"Rule\"+i] = msg.payload[i]\n    }\n    \n    // I also save tags in msg.payload.tags\n    newPayload[\"tags\"] = global.get(\"tags\");\n    \n    for (var k=0; k<msg.payload.length; k++) {\n        // The parse of the three JSON files is performed\n        newPayload[\"Rules\"][\"Rule\"+k][\"action_data\"] = JSON.parse(newPayload[\"Rules\"][\"Rule\"+k][\"action_data\"]);\n        newPayload[\"Rules\"][\"Rule\"+k][\"event_data\"] = JSON.parse(newPayload[\"Rules\"][\"Rule\"+k][\"event_data\"]);\n        newPayload[\"Rules\"][\"Rule\"+k][\"state_data\"] = JSON.parse(newPayload[\"Rules\"][\"Rule\"+k][\"state_data\"]);\n        \n        action = newPayload[\"Rules\"][\"Rule\"+k][\"action_data\"];\n        state = newPayload[\"Rules\"][\"Rule\"+k][\"state_data\"];\n    \n        /* ACTIONS */\n        // Audio or colour parameters are extracted from the action label\n        for (i=0; i<action.length; i++) {\n            let act = newPayload[\"Rules\"][\"Rule\"+k][\"action_data\"][i].label;\n            if (act) {\n                if (act.match('Play')) { //Riproduci audio //act.substr(0, 1) === 'R'\n                //let reg = /audio(?:(?!^\\.)[\\s\\S])+\\.mp3/g;\n                //let audio = act.match(reg);\n                let audio = action[i][\"parameters\"][0][\"value\"]\n                newPayload[\"Rules\"][\"Rule\"+k][\"action_data\"][i][\"audio\"] = audio.toString(); // = audio.toString().substr(6);\n                \n                } else if (act.match('Turn')) { //Accendi led \n                    //let reg = /,(?:(?!^\\.)[\\s\\S])+\\s/g\n                    //let colour = act.match(reg);\n                    if (act.match('on')) {\n                        let colour = action[i][\"parameters\"][0][\"value\"]\n                        newPayload[\"Rules\"][\"Rule\"+k][\"action_data\"][i][\"colour\"] = colour.toString() // .substr(2).trim();\n                    } else if (act.match('off')) {\n                        newPayload[\"Rules\"][\"Rule\"+k][\"action_data\"][i][\"colour\"] = 'off' \n                    }\n                }   \n            }\n        }\n        \n        /* EVENT */\n        // From the event label, the parameters of the tiles and their positions are extracted.\n        let evt = newPayload[\"Rules\"][\"Rule\"+k][\"event_data\"].label;\n        //let reg = /tessera(?:(?!^\\.)[\\s\\S])+/g;\n        let numbers = [];\n        if (evt.match(/placed/ig)) { //event is \"Tile is placed\"\n            newPayload[\"Rules\"][\"Rule\"+k][\"event_data\"][\"evt\"] = \"placed\"\n        } else if (evt.match(/removed/ig)){ //event is \"Tile is removed\"\n            newPayload[\"Rules\"][\"Rule\"+k][\"event_data\"][\"evt\"] = \"removed\"\n        } else if (evt.match(/arithmetic expression/ig)) {\n            if (evt.match(/correct/ig)){\n                newPayload[\"Rules\"][\"Rule\"+k][\"event_data\"][\"evt\"] = \"expr_correct\"\n            } else {\n                newPayload[\"Rules\"][\"Rule\"+k][\"event_data\"][\"evt\"] = \"expr_wrong\"\n            }\n        }\n        /* STATES */\n        // From the state label, the parameters of the tiles and their positions are extracted.\n        for (i=0; i<state.length; i++) {\n            let st = newPayload[\"Rules\"][\"Rule\"+k][\"state_data\"][i].label;\n            //let reg = /tessera(?:(?!^\\.)[\\s\\S])+/g;\n            if (st) {\n                let reg = /Tile(?:(?!^\\.)[\\s\\S])+/g;\n                let numbers = [];\n                let matches = st.match(reg)\n                if (matches) {\n                    numbers = matches.toString().split(\" \");\n                    newPayload[\"Rules\"][\"Rule\"+k][\"state_data\"][i][\"card\"] = numbers[3];//numbers[1]\n                    newPayload[\"Rules\"][\"Rule\"+k][\"state_data\"][i][\"position\"] = numbers[11]; //numbers[3]\n                }\n            }\n        }\n    }\n    msg.payload = newPayload\n    return msg\n} catch (e) {\n    node.warn (e.stack);\n    //return msg;\n}","outputs":1,"noerr":0,"x":274.0094757080078,"y":157.00569820404053,"wires":[["9f9c5fb5.45832"]]},{"id":"9f9c5fb5.45832","type":"change","z":"faabdb9262a45d54","name":"","rules":[{"t":"set","p":"rules","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":460.9336700439453,"y":141.1041488647461,"wires":[[]]},{"id":"5a67015081be59c7","type":"mqtt-broker","z":"","name":"","broker":"90.147.170.155","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"10d723b0a02fe551","type":"MySQLdatabase","z":"","name":"DB_SENSATION","host":"localhost","port":"3306","db":"sensation","tz":"","charset":"UTF8"}]